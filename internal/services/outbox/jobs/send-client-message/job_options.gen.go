// Code generated by options-gen. DO NOT EDIT.
package sendclientmessagejob

import (
	fmt461e464ebed9 "fmt"
	"time"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
	"go.uber.org/zap"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	name string,
	msgRepo messageRepository,
	producer messageProducer,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	o.name = name
	o.msgRepo = msgRepo
	o.producer = producer

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithExecutionTimeout(opt time.Duration) OptOptionsSetter {
	return func(o *Options) {
		o.executionTimeout = opt
	}
}

func WithMaxAttempts(opt int) OptOptionsSetter {
	return func(o *Options) {
		o.maxAttempts = opt
	}
}

func WithLogger(opt *zap.Logger) OptOptionsSetter {
	return func(o *Options) {
		o.logger = opt
	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("name", _validate_Options_name(o)))
	errs.Add(errors461e464ebed9.NewValidationError("msgRepo", _validate_Options_msgRepo(o)))
	errs.Add(errors461e464ebed9.NewValidationError("producer", _validate_Options_producer(o)))
	return errs.AsError()
}

func _validate_Options_name(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.name, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `name` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_msgRepo(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.msgRepo, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `msgRepo` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_producer(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.producer, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `producer` did not pass the test: %w", err)
	}
	return nil
}
