// Code generated by cmd/gen-types; DO NOT EDIT.
package types

import (
	"errors"

	"database/sql/driver"
	"github.com/google/uuid"
)

type IDs interface {
	ChatID | MessageID
}

var ErrEmptyID = errors.New("empty id")

func Parse[t IDs](value string) (t, error) {
	id, err := uuid.Parse(value)
	if err != nil {
		return t{}, err
	}
	return t(id), nil
}

func MustParse[t IDs](value string) t {
	id, err := uuid.Parse(value)
	if err != nil {
		panic(err)
	}
	return t(id)
}

type ChatID uuid.UUID

var ChatIDNil = ChatID(uuid.Nil)

func NewChatID() ChatID {
	return ChatID(uuid.New())
}

func (id ChatID) String() string {
	return uuid.UUID(id).String()
}

func (id ChatID) Value() (driver.Value, error) {
	return uuid.UUID(id).Value()
}

func (id *ChatID) Scan(v any) error {
	return (*uuid.UUID)(id).Scan(v)
}

func (id ChatID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *ChatID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id ChatID) IsZero() bool {
	return id == ChatIDNil
}

func (id ChatID) Matches(other any) bool {
	return id == other
}

func (id ChatID) Validate() error {
	if id.IsZero() {
		return ErrEmptyID
	}
	return nil
}

type MessageID uuid.UUID

var MessageIDNil = MessageID(uuid.Nil)

func NewMessageID() MessageID {
	return MessageID(uuid.New())
}

func (id MessageID) String() string {
	return uuid.UUID(id).String()
}

func (id MessageID) Value() (driver.Value, error) {
	return uuid.UUID(id).Value()
}

func (id *MessageID) Scan(v any) error {
	return (*uuid.UUID)(id).Scan(v)
}

func (id MessageID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *MessageID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id MessageID) IsZero() bool {
	return id == MessageIDNil
}

func (id MessageID) Matches(other any) bool {
	return id == other
}

func (id MessageID) Validate() error {
	if id.IsZero() {
		return ErrEmptyID
	}
	return nil
}
