# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/keepcalmist/chat-service
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "./internal/types/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.54.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/Library/Caches"
  TOOLS_DIR:
    sh: "echo `pwd`/bin/tools"
  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.10.1
    mvdan.cc/gofumpt@v0.4.0
    github.com/kazhuravlev/options-gen/cmd/options-gen@v0.28.3
    entgo.io/ent/cmd/ent@v0.12.4
    github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.15.0
    github.com/golang/mock/mockgen@v1.6.0
    github.com/onsi/ginkgo/v2/ginkgo@v2.13.1
  DOCKER_COMPOSE_PATHS: |
    ./deploy/local/docker-compose.yml
    ./deploy/local/docker-compose.sentry.yml
    ./deploy/local/docker-compose.swagger-ui.yml
  DOCKER_COMPOSE_PATHS_WITH_FLAGS:
    sh: echo '{{range $index, $element := (without (splitList "\n" .DOCKER_COMPOSE_PATHS) "") }} -f {{$element}} {{end}}'
  DOCKER_COMPOSE_CMD:
    sh: "which docker-compose"
  DOCKER_COMPOSE_CMD_FILES: '{{ .DOCKER_COMPOSE_CMD }} {{ .DOCKER_COMPOSE_PATHS_WITH_FLAGS }}'
  SERVICES:
    sh: "{{.DOCKER_COMPOSE_CMD_FILES}} --profile all --profile psql config --services"
  TYPES: |
    ChatID
    MessageID
    ProblemID
    UserID
    RequestID
    JobID
    FailedJobID
    EventID
  TYPES_PKG: types
  TYPES_DST: ./internal/types/types.gen.go
  ENT_SCHEMA: ./internal/store/schema
  ENT_TEMPLATES: ./internal/store/templates
  KEYCLOAK_BIN: /opt/keycloak/bin/
  CLIENT_V1_SRC: ./api/client.v1.swagger.yml
  CLIENT_V1_DST: ./internal/server-client/v1/server.gen.go
  CLIENT_V1_PKG: clientv1
  ### E2E tests ###
  E2E_CLIENT_V1_DST: ./tests/e2e/api/client/v1/client.gen.go
  E2E_CLIENT_V1_PKG: apiclientv1


tasks:
  default:
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    cmds:
      - echo "- gofumpt"
      - "{{.TOOLS_DIR}}/gofumpt -l -w {{.GO_FILES}}"
      - echo "- gci"
      - "{{.TOOLS_DIR}}/gci write -s standard -s default -s \"prefix({{.GO_MODULE}})\" {{.GO_FILES}}"

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: {CLI_ARGS: "run -v --fix --timeout=5m ./..."}

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -race ./...

  build:
    cmds:
      - echo "- Build"
      - go build -o ./bin/ ./cmd/chat-service

  dev-tools:install:
    cmds:
      - echo "- Install gci"
      - for: {var: DEV_TOOLS, split: ''}
        cmd: export GOBIN="{{.TOOLS_DIR}}" && go install {{.ITEM}}

  generate:
    cmds:
      - export PATH="${PATH}:{{.TOOLS_DIR}}" && go generate ./...
      - task: gen:types
      - task: ent:gen
      - task: gen:api
      - task: gen:e2e
    aliases: [gen]

  deps:
    desc: Стартует контейнеры с зависимостями (можно в detached-режиме).
    cmds:
    - "{{.DOCKER_COMPOSE_CMD_FILES}}  --profile all --profile psql up -d"

  deps:cmd:
    desc: Дать произвольную команду "docker compose"-у.
    cmds:
     - "{{.DOCKER_COMPOSE_CMD_FILES}}  {{.CLI_ARGS}}"

  deps:status:
    desc: Показывает статус запущенных контейнеров.
    cmds:
    - "{{.DOCKER_COMPOSE_CMD_FILES}} ps"

  deps:logs:
    desc: Показывает логи всех сервисов или одного сервиса.
    cmds:
      - task: deps:cmd
        vars:
          CLI_ARGS: "logs {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      - task: deps:cmd
        vars:
          CLI_ARGS: "stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:services:
    cmds:
      - for: { var: SERVICES, split: '' }
        cmd: echo {{.ITEM}}

  deps:reset-all:
    vars:
      SERVICE: ""
    cmds:
      - echo "Reset all services"
      - for: { var: SERVICES, split: '' }
        task: deps:reset
        vars:
          SERVICE: "{{.ITEM}}"

  deps:reset:
    requires:
      vars: [SERVICE]
    cmds:
      - echo "Reset {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD_FILES}} --profile all --profile psql  rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD_FILES}} --profile all --profile psql  up -d {{.SERVICE}}"

  gen:types:
    cmds:
      - echo "Generate types..."
      - go run ./cmd/gen-types {{.TYPES_PKG}} {{ without (splitLines .TYPES) "" | join ","}} {{.TYPES_DST}}

  gen:e2e:
    cmds:
      - echo "[E2E] Generate client API..."
      - "{{.TOOLS_DIR}}/oapi-codegen --old-config-style -generate types,client -package {{.E2E_CLIENT_V1_PKG}} {{.CLIENT_V1_SRC}} > {{.E2E_CLIENT_V1_DST}}"

  gen:api:
    cmds:
      - "{{.TOOLS_DIR}}/oapi-codegen -generate types,server,spec -package clientv1 -o ./internal/server/server-client/v1/server.gen.go --old-config-style ./api/client.v1.swagger.yml"
      - "{{.TOOLS_DIR}}/oapi-codegen -generate types,server,spec -package managerv1 -o ./internal/server/server-manager/v1/server.gen.go --old-config-style ./api/manager.v1.swagger.yml"
      - "{{.TOOLS_DIR}}/oapi-codegen -generate types,server,spec -package clientevents -o ./internal/server/server-client/events/events.gen.go --old-config-style ./api/client.events.swagger.yml"
  ent:new:

    cmds:
      - "{{.TOOLS_DIR}}/ent new --target {{.ENT_SCHEMA}} Chat Message Problem"
      - task: tidy

  ent:gen:
    cmds:
      - "{{.TOOLS_DIR}}/ent generate --feature sql/upsert --feature sql/lock  --template {{.ENT_TEMPLATES}} {{.ENT_SCHEMA}}"
      - task: tidy

  tests:integration:
    dotenv: ['.env']
    cmds:
      - echo "- Integration tests"
      - go test -tags integration -count 1 -race ./...

  kc:export:
    cmds:
      - echo "- Export keycloak"
      - task: deps:cmd
        vars:
          CLI_ARGS: "exec keycloak {{.KEYCLOAK_BIN}}kc.sh export --file {{.KEYCLOAK_BIN}}dump.json --realm Bank"
      - task: deps:cmd
        vars:
          CLI_ARGS: "cp keycloak:{{.KEYCLOAK_BIN}}dump.json ./deploy/local/dump.json"

  tests:e2e:
    dotenv: [ '.env' ]
    cmds:
      - echo "- End-to-end tests..."
      # NOTE: It's important to run tests serial (without `-p` flag) – for correct `clientsPool` sharing.
      - "{{.TOOLS_DIR}}/ginkgo --fail-fast --timeout=1m --tags e2e {{.CLI_ARGS}} ./tests/e2e"
