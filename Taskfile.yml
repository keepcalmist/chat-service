# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/keepcalmist/chat-service
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.54.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/Library/Caches"
  TOOLS_DIR:
    sh: "echo `pwd`/bin/tools"
  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.10.1
    mvdan.cc/gofumpt@v0.4.0
    github.com/kazhuravlev/options-gen/cmd/options-gen@v0.28.3
    entgo.io/ent/cmd/ent@v0.12.4
  DOCKER_COMPOSE_PATHS: |
    ./deploy/local/docker-compose.yml
    ./deploy/local/docker-compose.sentry.yml
  DOCKER_COMPOSE_PATHS_WITH_FLAGS:
    sh: echo '{{range $index, $element := (without (splitList "\n" .DOCKER_COMPOSE_PATHS) "") }} -f {{$element}} {{end}}'
  DOCKER_COMPOSE_CMD:
    sh: "which docker-compose"
  SERVICES:
    sh: "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS_WITH_FLAGS}} --profile all --profile psql config --services"
  TYPES: |
    ChatID
    MessageID
    ProblemID
    UserID
  TYPES_PKG: types
  TYPES_DST: ./internal/types/types.gen.go
  ENT_SCHEMA: ./internal/store/schema

tasks:
  print:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS_WITH_FLAGS}} ps"

  default:
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    cmds:
      - echo "- gofumpt"
      - "{{.TOOLS_DIR}}/gofumpt -l -w {{.GO_FILES}}"
      - echo "- gci"
      - "{{.TOOLS_DIR}}/gci write -s standard -s default -s \"prefix({{.GO_MODULE}})\" {{.GO_FILES}}"

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: {CLI_ARGS: "run -v --fix --timeout=5m ./..."}

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -race ./...

  build:
    cmds:
      - echo "- Build"
      - go build -o ./bin/ ./cmd/chat-service

  dev-tools:install:
    cmds:
      - echo "- Install gci"
      - for: {var: DEV_TOOLS, split: ''}
        cmd: export GOBIN="{{.TOOLS_DIR}}" && go install {{.ITEM}}

  generate:
    cmds:
      - export PATH="${PATH}:{{.TOOLS_DIR}}" && go generate ./...
      - task: gen:types
        # FIXME: Добавь вызов ent:gen
    aliases: [gen]

  deps:
    desc: Стартует контейнеры с зависимостями (можно в detached-режиме).
    cmds:
    - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS_WITH_FLAGS}} --profile all up -d"

  deps:cmd:
    desc: Дать произвольную команду "docker compose"-у.
    cmds:
     - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS_WITH_FLAGS}} {{.CLI_ARGS}}"

  deps:status:
    desc: Показывает статус запущенных контейнеров.
    cmds:
    - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS_WITH_FLAGS}} ps"

  deps:logs:
    desc: Показывает логи всех сервисов или одного сервиса.
    cmds:
      - task: deps:cmd
        vars:
          CLI_ARGS: "logs {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      - task: deps:cmd
        vars:
          CLI_ARGS: " stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:services:
    cmds:
      - for: { var: SERVICES, split: '' }
        cmd: echo {{.ITEM}}

  deps:reset-all:
    vars:
      SERVICE: ""
    cmds:
      - echo "Reset all services"
      - for: { var: SERVICES, split: '' }
        task: deps:reset
        vars:
          SERVICE: "{{.ITEM}}"

  deps:reset:
    requires:
      vars: [SERVICE]
    cmds:
      - echo "Reset {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS_WITH_FLAGS}} --profile all --profile psql  rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_COMPOSE_PATHS_WITH_FLAGS}} --profile all --profile psql  up -d {{.SERVICE}}"

  gen:types:
    cmds:
      - echo "Generate types..."
      - go run ./cmd/gen-types {{.TYPES_PKG}} {{ without (splitLines .TYPES) "" | join ","}} {{.TYPES_DST}}

  ent:new:
    cmds:
      - "{{.TOOLS_DIR}}/ent new --target {{.ENT_SCHEMA}} Chat Message Problem"
      - task: tidy

  ent:gen:
    cmds:
#     - FIXME
      -
      - task: tidy