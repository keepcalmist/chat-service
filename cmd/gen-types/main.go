package main

import (
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"text/template"
)

var header = `// Code generated by cmd/gen-types; DO NOT EDIT.
package {{.PKG}}

import (
	"errors"

	"database/sql/driver"
	"github.com/google/uuid"
)
	
type IDs interface {
	{{.TYPES | join " | "}}
}

var ErrEmptyID = errors.New("empty id")

func Parse[t IDs](value string) (t, error) {
	id, err := uuid.Parse(value)
	if err != nil {
		return t{}, err
	}
	return t(id), nil
}

func MustParse[t IDs](value string) t {
	id, err := uuid.Parse(value)
	if err != nil {
		panic(err)
	}
	return t(id)
}	

`

func main() {
	if len(os.Args) != 4 {
		log.Fatalf("invalid args count: %d", len(os.Args)-1)
	}
	pkg := os.Args[1]
	out := os.Args[3]

	types := strings.Split(os.Args[2], ",")
	if err := run(pkg, types, out); err != nil {
		panic(err)
	}

	p, _ := os.Getwd()
	log.Printf("%v generated\n", filepath.Join(p, out))
}

func run(pkg string, types []string, out string) (err error) {
	output, err := os.OpenFile(out, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0o644)
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		output.Close()
		if err != nil {
			_ = os.Remove(out)
		}
	}()

	tmplHeader, err := template.New("header").Funcs(template.FuncMap{
		"join": func(sep string, list []string) string {
			return strings.Join(list, sep)
		},
	}).Parse(header)
	if err != nil {
		return err
	}

	err = tmplHeader.ExecuteTemplate(output, "header", map[string]interface{}{
		"PKG":   pkg,
		"TYPES": types,
	})
	if err != nil {
		return err
	}

	_, currentFile, _, _ := runtime.Caller(0)
	fileWithTypesTemplate, err := os.ReadFile(filepath.Join(filepath.Dir(currentFile), "types.tmpl"))
	if err != nil {
		return err
	}

	tmplTypes, err := template.New("types").Parse(string(fileWithTypesTemplate))
	if err != nil {
		return err
	}

	for _, t := range types {
		err = tmplTypes.ExecuteTemplate(output, "types", map[string]interface{}{
			"NAME": t,
		})
		if err != nil {
			return err
		}
	}

	return err
}
